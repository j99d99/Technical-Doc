openstack-mitaka安装
vim /etc/hosts
1.1.1.222 controller
1.1.1.223 compute

vi /etc/resolv.conf
nameserver 221.12.1.227
nameserver 221.12.33.227

###ntp服务安装配置
yum install -y ntp
#controller节点配置
vim /etc/ntp.conf
server 127.127.1.0

systemctl enable ntpd.service
systemctl start ntpd.service

#compute节点配置
vim /etc/ntp.conf
server 1.1.1.225
fudge  10.20.0.10 stratum 10

systemctl enable ntpd.service
systemctl start ntpd.service


#安装openstack库
yum install -y centos-release-openstack-mitaka
#升级包
yum upgrade
#reboot
#安装openstack客户端
yum install -y python-openstackclient
#安装管理openstack安全策略工具
yum install -y openstack-selinux

安装数据库(在controller节点)
yum install -y mariadb mariadb-server python2-PyMySQL
vim /etc/my.cnf.d/openstack.cnf
[mysqld]
...
bind-address = 1.1.1.222
default-storage-engine = innodb
innodb_file_per_table
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8


systemctl enable mariadb.service
systemctl start mariadb.service

mysql_secure_installation
设置root密码:RDkj2016


安装rabbitmq消息队列服务
yum install -y rabbitmq-server

systemctl enable rabbitmq-server.service
systemctl start rabbitmq-server.service

添加rabbitmq用户
rabbitmqctl add_user openstack openstack
rabbitmqctl set_user_tags openstack administrator
rabbitmqctl set_permissions openstack ".*" ".*" ".*"

#安装memcached
yum install -y memcached python-memcached

systemctl enable memcached.service
systemctl start memcached.service
---------------------------正式开始安装---------------------------------------------
####安装keystone
mysql -uroot -p
create database keystone;
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'keystone';
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'keystone'; 

#生产管理员token
openssl rand -hex 10
68796e9ac22a062149d0

#安装软件包
yum install -y openstack-keystone httpd mod_wsgi

vim /etc/keystone/keystone.conf
[DEFAULT]
...
admin_token = 68796e9ac22a062149d0
[database]
...
connection = mysql+pymysql://keystone:keystone@controller/keystone
[token]
...
provider = fernet

#同步数据库
su -s /bin/sh -c "keystone-manage db_sync" keystone

#初始化Frenet keystone
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone

#配置apache
 vim /etc/httpd/conf/httpd.conf
 ServerName controller

 #创建新配置文件
 vim /etc/httpd/conf.d/wsgi-keystone.conf
Listen 5000
Listen 35357

<VirtualHost *:5000>
    WSGIDaemonProcess keystone-public processes=5 threads=1 user=keystone group=keystone display-name=%{GROUP}
    WSGIProcessGroup keystone-public
    WSGIScriptAlias / /usr/bin/keystone-wsgi-public
    WSGIApplicationGroup %{GLOBAL}
    WSGIPassAuthorization On
    ErrorLogFormat "%{cu}t %M"
    ErrorLog /var/log/httpd/keystone-error.log
    CustomLog /var/log/httpd/keystone-access.log combined

    <Directory /usr/bin>
        Require all granted
    </Directory>
</VirtualHost>

<VirtualHost *:35357>
    WSGIDaemonProcess keystone-admin processes=5 threads=1 user=keystone group=keystone display-name=%{GROUP}
    WSGIProcessGroup keystone-admin
    WSGIScriptAlias / /usr/bin/keystone-wsgi-admin
    WSGIApplicationGroup %{GLOBAL}
    WSGIPassAuthorization On
    ErrorLogFormat "%{cu}t %M"
    ErrorLog /var/log/httpd/keystone-error.log
    CustomLog /var/log/httpd/keystone-access.log combined

    <Directory /usr/bin>
        Require all granted
    </Directory>
</VirtualHost>

启动服务和设置开机启动
systemctl enable httpd.service
systemctl start httpd.service

#创建服务和API端点
export OS_TOKEN=68796e9ac22a062149d0
export OS_URL=http://controller:35357/v3
export OS_IDENTITY_API_VERSION=3

#创建服务
openstack service create --name keystone --description "OpenStack Identity" identity
#创建端点
openstack endpoint create --region RegionOne identity public http://controller:5000/v3
openstack endpoint create --region RegionOne identity internal http://controller:5000/v3
openstack endpoint create --region RegionOne identity admin http://controller:35357/v3

#创建域、项目、用户、角色、
openstack domain create --description "Default Domain" default
#添加admin项目
openstack project create --domain default --description "Admin Project" admin
#创建admin用户
openstack user create --domain default --password-prompt admin	(此步骤需输入用户密码,个人设置3e4r5t6y)
#创建admin角色
openstack role create admin
#关联admin角色到admin用户和项目
openstack role add --project admin --user admin admin

#添加service项目
openstack project create --domain default --description "Service Project" service
#创建demo项目(普通用户项目)
openstack project create --domain default --description "Demo Project" demo
#创建demo用户
openstack user create --domain default --password-prompt demo	(同建立admin用户一样,需要设置用户密码)
#创建user角色
openstack role create user
#添加user角色到demo项目和用户
openstack role add --project demo --user demo user

##验证用户
考虑安全,关闭临时令牌认证机制
vim /etc/keystone/keystone-paste.ini
将下面3个段内的pipeline选项中的admin_token_auth删除
[pipeline:public_api]
[pipeline:admin_api]
[pipeline:api_v3]


unset OS_TOKEN OS_URL
创建客户端环境变量脚本
vim admin-openrc.sh
export OS_PROJECT_DOMAIN_NAME=default
export OS_USER_DOMAIN_NAME=default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=3e4r5t6y
export OS_AUTH_URL=http://controller:35357/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

vim demo-openrc.sh
export OS_PROJECT_DOMAIN_NAME=default
export OS_USER_DOMAIN_NAME=default
export OS_PROJECT_NAME=demo
export OS_USERNAME=demo
export OS_PASSWORD=3e4r5t6y
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

source admin-openrc.sh
openstack token issue 


##glance镜像服务安装
mysql -uroot -p
create database glance;
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'glance';
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY 'glance';

创建服务证书
#创建glance用户
openstack user create --domain default --password-prompt glance
添加admin角色到glance用户和service项目上
openstack role add --project service --user glance admin
#创建glance服务
openstack service create --name glance --description "OpenStack Image" image
#创建端口
openstack endpoint create --region RegionOne image public http://controller:9292
openstack endpoint create --region RegionOne image internal http://controller:9292
openstack endpoint create --region RegionOne image admin http://controller:9292

##安装glance软件包
yum install -y openstack-glance
vim /etc/glance/glance-api.conf
[database]
...
connection = mysql+pymysql://glance:glance@controller/glance

[keystone_authtoken]
...
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = glance
password = glance

[paste_deploy]
...
flavor = keystone

[glance_store]
...
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/


vim /etc/glance/glance-registry.conf
[database]
...
connection = mysql+pymysql://glance:glance@controller/glance

[keystone_authtoken]
...
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = glance
password = GLANCE_PASS

[paste_deploy]
...
flavor = keystone


###数据库同步
su -s /bin/sh -c "glance-manage db_sync" glance

systemctl enable openstack-glance-api.service openstack-glance-registry.service
systemctl start openstack-glance-api.service openstack-glance-registry.service

上传镜像
openstack image create "CentOS-6.4-x86_64" \
  --file centos6.4-x86_64-gold-master.img \
  --disk-format qcow2 --container-format bare \
  --public



##nova计算节点的安装
#在controller节点安装步骤
mysql -uroot -p
CREATE DATABASE nova_api;
CREATE DATABASE nova;
GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' IDENTIFIED BY 'nova';
GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' IDENTIFIED BY 'nova';
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY 'nova';
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' IDENTIFIED BY 'nova';

source admin-openrc.sh
##创建nova用户
openstack user create --domain default --password-prompt nova	(密码设置nova)
#将nova用户添加到admin角色
openstack role add --project service --user nova admin

#创建nova服务
openstack service create --name nova --description "OpenStack Compute" compute
#创建端点
openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1/%\(tenant_id\)s
openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1/%\(tenant_id\)s
openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1/%\(tenant_id\)s

##安装nova软件包
yum install -y openstack-nova-api openstack-nova-conductor openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler

vim /etc/nova/nova.conf
[DEFAULT]
enabled_apis = osapi_compute,metadata
rpc_backend = rabbit
auth_strategy = keystone
my_ip = 1.1.1.222
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[api_database]
connection = mysql+pymysql://nova:nova@controller/nova_api

[database]
connection = mysql+pymysql://nova:nova@controller/nova

[glance]
api_servers = http://controller:9292

[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = nova

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

[oslo_messaging_rabbit]
rabbit_host = controller
rabbit_userid = openstack
rabbit_password = openstack

[vnc]
vncserver_listen = $my_ip
vncserver_proxyclient_address = $my_ip

su -s /bin/sh -c "nova-manage api_db sync" nova
su -s /bin/sh -c "nova-manage db sync" nova

#设置开机启动和启动服务
systemctl enable openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service
systemctl start openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service



#############在compute节点上安装配置
yum install -y openstack-nova-compute
vim /etc/nova/nova.conf
[DEFAULT]
auth_strategy = keystone
rpc_backend = rabbit
my_ip = 1.1.1.223
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver


[oslo_messaging_rabbit]
rabbit_host = controller
rabbit_userid = openstack
rabbit_password = openstack



[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = nova

[vnc]
enabled = True
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = $my_ip
novncproxy_base_url = http://1.1.1.222:6080/vnc_auto.html

[glance]
api_servers = http://controller:9292

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

#完成安装
egrep -c '(vmx|svm)' /proc/cpuinfo
#根据命令返回结果来判断是否需要进行下面的配置
#如果返回的结果是0.则需要进行如下配置，其他结果不需要进行额外配置
vim /etc/nova/nova.conf
[libvirt]
...
virt_type = qemu

#启动服务和设置开机启动
systemctl enable libvirtd.service openstack-nova-compute.service
systemctl start libvirtd.service openstack-nova-compute.service

#验证安装
#在controller节点上
openstack compute service list




######安装neutron网络服务
##在controller节点安装步骤
mysql -u root -p
CREATE DATABASE neutron;
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY 'neutron';
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY 'neutron';

##创建服务证书
#创建用户
openstack user create --domain default --password-prompt neutron
#添加admin角色到neutron用户
openstack role add --project service --user neutron admin
#创建neutron服务
openstack service create --name neutron --description "OpenStack Networking" network
#创建端点
openstack endpoint create --region RegionOne network public http://controller:9696
openstack endpoint create --region RegionOne network internal http://controller:9696
openstack endpoint create --region RegionOne network admin http://controller:9696

########网络配置###
完成网络配置在进行下一步配置，此处采用网络模式公用网络
#安装软件包
yum install -y openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables

vim /etc/neutron/neutron.conf
[DEFAULT]
core_plugin = ml2
service_plugins =
rpc_backend = rabbit
auth_strategy = keystone
notify_nova_on_port_status_changes = True
notify_nova_on_port_data_changes = True

[oslo_messaging_rabbit]
rabbit_host = controller
rabbit_userid = openstack
rabbit_password = openstack

[database]
connection = mysql+pymysql://neutron:neutron@controller/neutron

[keystone_authtoken]
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = neutron

[nova]
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = nova
password = nova

[oslo_concurrency]
lock_path = /var/lib/neutron/tmp


##配置ML2插件
vim /etc/neutron/plugins/ml2/ml2_conf.ini
[ml2]
type_drivers = flat,vlan
tenant_network_types =
mechanism_drivers = linuxbridge
extension_drivers = port_security

[ml2_type_flat]
flat_networks = provider

[securitygroup]
enable_ipset = True

##配置Linuxbridge代理
vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini
[linux_bridge]
physical_interface_mappings = provider:ens192
[vxlan]
enable_vxlan = False
[securitygroup]
...
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver

##配置dhcp代理
vim /etc/neutron/dhcp_agent.ini
[DEFAULT]
...
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
enable_isolated_metadata = True

##配置元数据代理
vim /etc/neutron/metadata_agent.ini
[DEFAULT]
...
nova_metadata_ip = controller
metadata_proxy_shared_secret = METADATA_SECRET

###为计算节点配置网络服务
vim /etc/nova/nova.conf
[neutron]
...
url = http://controller:9696
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = neutron

service_metadata_proxy = True
metadata_proxy_shared_secret = METADATA_SECRET	(与元数据代理的密码保持一致)

#完成安装
ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

#数据同步
su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron

#重启计算api服务
systemctl restart openstack-nova-api.service


##设置服务开机启动
systemctl enable neutron-server.service \
  neutron-linuxbridge-agent.service neutron-dhcp-agent.service \
  neutron-metadata-agent.service
#启动服务
systemctl start neutron-server.service \
  neutron-linuxbridge-agent.service neutron-dhcp-agent.service \
  neutron-metadata-agent.service

  
###安装配置计算节点
安装组件
yum install -y openstack-neutron-linuxbridge ebtables ipset

##配置通用组件
vim /etc/neutron/neutron.conf
[DEFAULT]
...
rpc_backend = rabbit
auth_strategy = keystone

[oslo_messaging_rabbit]
...
rabbit_host = controller
rabbit_userid = openstack
rabbit_password = openstack

[keystone_authtoken]
...
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = neutron
[oslo_concurrency]
...
lock_path = /var/lib/neutron/tmp

##配置公用网络模式
vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini
[linux_bridge]
physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME

[vxlan]
enable_vxlan = False

[securitygroup]
...
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver


##未计算节点配置网络服务
vim /etc/nova/nova.conf
[neutron]
...
url = http://controller:9696
auth_url = http://controller:35357
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = neutron

##重启计算服务
systemctl restart openstack-nova-compute.service

启动Linuxbridge代理并配置它开机自启动
systemctl enable neutron-linuxbridge-agent.service
systemctl start neutron-linuxbridge-agent.service


##问题


通过neutron agent-list查看不显示compute节点的网络信息
#问题排查,发现rabbit无法远程认证，，开始以为rabbit无法远程连接导致，结果开启远程问题依旧，最后发送时时间不一致导致的
##所以，ntp时间同步安装不能省




##dashboard服务安装
#在controller节点上
yum install openstack-dashboard
vim /etc/openstack-dashboard/local_settings
OPENSTACK_HOST = "controller"
ALLOWED_HOSTS = ['*', ]
#配置memcached缓存服务
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

CACHES = {
    'default': {
         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
         'LOCATION': 'controller:11211',
    }
}
#启用第三版API认证
OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOST
#启用对域的支持
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True
#配置API版本
OPENSTACK_API_VERSIONS = {
    "identity": 3,
    "image": 2,
    "volume": 2,
}
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = 'default'
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"

##选取的公网模式，需禁用3层网络服务
OPENSTACK_NEUTRON_NETWORK = {
    ...
    'enable_router': False,
    'enable_quotas': False,
    'enable_distributed_router': False,
    'enable_ha_router': False,
    'enable_lb': False,
    'enable_firewall': False,
    'enable_vpn': False,
    'enable_fip_topology_check': False,
}


#完成安装
systemctl restart httpd.service memcached.service


#启动虚拟机实例
neutron net-create --shared --provider:physical_network provider --provider:network_type flat provider

neutron subnet-create --name provider \
  --allocation-pool start=192.168.1.100,end=192.168.1.200 \
  --dns-nameserver 114.114.114.114 --gateway 192.168.1.1 \
  provider 192.168.1.0/24
  
  
#创建规格主机
openstack flavor create --id 0 --vcpus 2 --ram 1024 --disk 20 m1.nano









