###redis集群部署

雪橙登录信息：
teamviewer
伙伴ID:	307496278
密码:	28zx7m


安装
yum install -y gcc-c++
tar zxvf redis-3.0.7.tar.gz
cd redis-3.0.7

make PREFIX=/usr/local/redis6379 install
make PREFIX=/usr/local/redis6380 install

cp redis.conf /etc/redis6379.conf	#redis配置文件
cp redis.conf /etc/redis6380.conf

cp utils/redis_init_script /etc/init.d/redis6379	#redis启动文件
cp utils/redis_init_script /etc/init.d/redis6380


cp /usr/local/redis6379/bin/* /usr/local/bin/


###配置
修改配置文件/etc/redis6379.conf
daemonize yes		#设置成后台启动
pidfile /var/run/redis_6379.pid		#修改pid文件名
requirepass xue456cheng		#设置密码

修改配置文件/etc/redis6380.conf
daemonize yes		#设置成后台启动
pidfile /var/run/redis_6380.pid		#修改pid文件名
port 6380		#修改端口,双redis不修改端口会导致端口冲突
requirepass xue456cheng		#设置密码


#修改启动文件
vim /etc/init/redis6379
在第一行后添加
#chkconfig: 2345 80 90
修改CONF="/etc/redis/${REDISPORT}.conf"
为CONF="/etc/redis6379.conf"


vim /etc/init/redis6380
在第一行后添加
#chkconfig: 2345 80 90
修改REDISPORT=6379
为REDISPORT=6380
修改CONF="/etc/redis/${REDISPORT}.conf"
为CONF="/etc/redis6379.conf"

#添加到服务
chkconfig redis6379 on
chkconfig redis6380 on


启动
service redis6379 start
service redis6380 start

#查看是否启动
netstart ntlp|grep 6379
netstart ntlp|grep 6380


###---------------
#修改/etc/redis.conf相关参数 
cluster-enabled yes 
cluster-config-file nodes.conf 
cluster-node-timeout 5000 
appendonly yes  
#通过命令创建集群，源码包的src目录下有命令redis-trib.rb 
yum -y  install zlib ruby rubygems 
gem install redis 
redis-3.0.7/src/redis-trib.rb create --replicas 1 172.18.100.103:6379 172.18.100.103:6380 172.18.100.104:6379 172.18.100.104:6380 172.18.100.123:6379 172.18.100.123:6380
#--repicas 1 表示希望为集群的每个主节点创建一个从节点 输入yes后当显示” [OK] All 16384 slots covered.”时,集群运行正常


[root@kvm100-103 redis-3.0.7]# redis-trib.rb create --replicas 1 172.18.100.103:6379 172.18.100.103:6380 172.18.100.104:6379 172.18.100.104:6380 172.18.100.123:6379 172.18.100.123:6380
>>> Creating cluster
[ERR] Sorry, can't connect to node 172.18.100.103:6379
解决办法：
/usr/lib/ruby/gems/1.8/gems/redis-3.3.0/lib/redis/client.rb
修改成
:password => 'xue456cheng'

###-------集群创建过程--------###

[root@kvm100-103 redis-3.0.7]# redis-trib.rb create --replicas 1 172.18.100.103:6379 172.18.100.103:6380 172.18.100.104:6379 172.18.100.104:6380 172.18.100.123:6379 172.18.100.123:6380
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
172.18.100.104:6379
172.18.100.103:6379
172.18.100.123:6379
Adding replica 172.18.100.103:6380 to 172.18.100.104:6379
Adding replica 172.18.100.104:6380 to 172.18.100.103:6379
Adding replica 172.18.100.123:6380 to 172.18.100.123:6379
M: 9a64fb747b3e264fdc1118247477299d9ba18839 172.18.100.103:6379
   slots:5461-10922 (5462 slots) master
S: 67b02bc4a70daf25adec2b2003779e1e1d9d742f 172.18.100.103:6380
   replicates d5cbd79d097d8379a3454c3db55a151f6c3204c7
M: d5cbd79d097d8379a3454c3db55a151f6c3204c7 172.18.100.104:6379
   slots:0-5460 (5461 slots) master
S: 1c4d08531bfecf1a0f0b343c701a898fe382b76a 172.18.100.104:6380
   replicates 9a64fb747b3e264fdc1118247477299d9ba18839
M: 16592e56dbc4d195864d5f8a7a14e3b876c1a314 172.18.100.123:6379
   slots:10923-16383 (5461 slots) master
S: 7eb0680fc9eb8efc1eb9b2a612f2d15d9c58f0af 172.18.100.123:6380
   replicates 16592e56dbc4d195864d5f8a7a14e3b876c1a314
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join...
>>> Performing Cluster Check (using node 172.18.100.103:6379)
M: 9a64fb747b3e264fdc1118247477299d9ba18839 172.18.100.103:6379
   slots:5461-10922 (5462 slots) master
M: 67b02bc4a70daf25adec2b2003779e1e1d9d742f 172.18.100.103:6380
   slots: (0 slots) master
   replicates d5cbd79d097d8379a3454c3db55a151f6c3204c7
M: d5cbd79d097d8379a3454c3db55a151f6c3204c7 172.18.100.104:6379
   slots:0-5460 (5461 slots) master
M: 1c4d08531bfecf1a0f0b343c701a898fe382b76a 172.18.100.104:6380
   slots: (0 slots) master
   replicates 9a64fb747b3e264fdc1118247477299d9ba18839
M: 16592e56dbc4d195864d5f8a7a14e3b876c1a314 172.18.100.123:6379
   slots:10923-16383 (5461 slots) master
M: 7eb0680fc9eb8efc1eb9b2a612f2d15d9c58f0af 172.18.100.123:6380
   slots: (0 slots) master
   replicates 16592e56dbc4d195864d5f8a7a14e3b876c1a314
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.

####-----查看集群节点-----###
[root@kvm100-103 redis-3.0.7]# redis-cli -c -p 6379 cluster nodes
NOAUTH Authentication required.
[root@kvm100-103 redis-3.0.7]# redis-cli -c -p 6379
127.0.0.1:6379> auth xue456cheng
OK
127.0.0.1:6379> cluster nodes
d5cbd79d097d8379a3454c3db55a151f6c3204c7 172.18.100.104:6379 master - 0 1468488926113 3 connected 0-5460
9a64fb747b3e264fdc1118247477299d9ba18839 172.18.100.103:6379 myself,master - 0 0 1 connected 5461-10922
16592e56dbc4d195864d5f8a7a14e3b876c1a314 172.18.100.123:6379 master - 0 1468488925612 5 connected 10923-16383
7eb0680fc9eb8efc1eb9b2a612f2d15d9c58f0af 172.18.100.123:6380 slave 16592e56dbc4d195864d5f8a7a14e3b876c1a314 0 1468488925613 6 connected
1c4d08531bfecf1a0f0b343c701a898fe382b76a 172.18.100.104:6380 slave 9a64fb747b3e264fdc1118247477299d9ba18839 0 1468488924611 4 connected
67b02bc4a70daf25adec2b2003779e1e1d9d742f 172.18.100.103:6380 slave d5cbd79d097d8379a3454c3db55a151f6c3204c7 0 1468488926113 3 connected
127.0.0.1:6379> 







/bin/sh: cc: command not found
make[1]: *** [adlist.o] Error 127
make[1]: Leaving directory `/root/redis-3.0.7/src'
make: *** [all] Error 2
解决办法:
make MALLOC=libc



#####-----------------------------------#####
redis下线带从节点的节点
步骤:
1.查找下线主节点的从节点id
redis-cli -c -p 6379 cluster nodes | grep 'master nodes id '
2.变更从节点的主节点,连接到从节点
redis-cli -c 6380 'slave nodes ip'
cluster replicate 'new master nodes id'
3.转移待删除节点的hash槽(slot)
redis-trib.rb reshard 'del master ip:port'
输入要转移的slot
输入接收slot的masterid
输入待删除的masterid
输入done
取消slot后重新reshard
删除节点
redis-trib.rb del-node masterip:port 'masterid'


#新加redis节点
#redis-trib.rb add-node 'new nodes' 'any old nodes'
redis-trib.rb add-node 192.168.3.85:6379 192.168.3.64:6379


#变更slave的master
#通过从节点IP连接
redis-cli -c  -p 6380 192.168.3.64
CLUSTER REPLICATE 9ffc6bddf85edab8b8a718765aa89500c180e536 (刚新增的节点的nodesid)



